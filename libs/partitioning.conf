# Version: 2020.10.12

efi_prepare_and_format_hdd(){
  ${SGDISK} -Z ${HDD}
  ${PARTD} -s ${HDD} mklabel gpt
  ${PARTD} -s -a optimal -- ${HDD} mkpart primary fat32 1 ${SIZE_ESP}
  ${PARTD} -s -a optimal -- ${HDD} name 1 esp
  ${PARTD} -s -a optimal -- ${HDD} mkpart primary ${FS_BOOT} ${SIZE_ESP} ${SIZE_BOOT_END}
  ${PARTD} -s -a optimal -- ${HDD} name 2  boot
  ${PARTD} -s -a optimal -- ${HDD} mkpart primary ${SIZE_BOOT_END} 100%
  ${PARTD} -s -a optimal -- ${HDD} name 3 os_arch
  ${PARTD} -s ${HDD} set 1 esp on
  ${PARTD} -s ${HDD} set 1 boot on
}


bios_prepare_and_format_hdd(){
  ${SGDISK} -Z ${HDD}
  ${PARTD} -s ${HDD} mklabel msdos
  ${PARTD} -s -a optimal -- ${HDD} mkpart primary ${FS_BOOT} 0% ${SIZE_BOOT}
  ${PARTD} -s -a optimal -- ${HDD} mkpart primary ${SIZE_BOOT_END} 100%
  ${PARTD} -s ${HDD} set 1 boot on
}


hdd_table(){
  case ${HDD_LABEL} in
  
    bios)
       bios_prepare_and_format_hdd
    ;;

    efi)
      efi_prepare_and_format_hdd
    ;;

    *)
      echo "supported lables are:
      - bios
      - efi"
      exit 1
    ;;
    
  esac 
}


efi_luks_create(){
  ${CRYPT} -y -c aes-xts-plain64 -s 512 -h whirlpool -i 35000 luksFormat ${HDD}3
  ${CRYPT} open ${HDD}3 ${LUKS_NAME}
}


bios_luks_create(){
  ${CRYPT} -y -c aes-xts-plain64 -s 512 -h whirlpool -i 35000 luksFormat ${HDD}2
  ${CRYPT} open ${HDD}2 ${LUKS_NAME}
}


create_luks_pv_and_vg(){
  ${PVC} /dev/mapper/${LUKS_NAME}
  ${VGC} ${VG_NAME} /dev/mapper/${LUKS_NAME}
}


create_lvs(){
  ${LVC} -L ${LVM_SIZE_ROOT} -n root ${VG_NAME}
  ${LVC} -L ${LVM_SIZE_SWAP} -n swappy ${VG_NAME}
  ${LVC} -L ${LVM_SIZE_VAR} -n var ${VG_NAME}
  ${LVC} -L ${LVM_SIZE_HOME} -n home ${VG_NAME}
}


efi_create_pv_and_vg(){
  ${PVC} -ff ${HDD}3
  ${VGC} -ff ${VG_NAME} ${HDD}3
}


bios_create_pv_and_vg(){
  ${PVC} -ff ${HDD}2
  ${VGC} -ff ${VG_NAME} ${HDD}2
}


create_pv_vg(){
  if [[ ${DO_CRYPT_HDD} == "crypt" ]] && [[ ${HDD_LABEL} == "efi" ]]
  then
    efi_luks_create
    create_luks_pv_and_vg
  elif [[ ${DO_CRYPT_HDD} == "nocrypt" ]] && [[ ${HDD_LABEL} == "efi" ]]
  then
    efi_create_pv_and_vg
  elif [[ ${DO_CRYPT_HDD} == "crypt" ]] && [[ ${HDD_LABEL} == "bios" ]]
  then
    bios_luks_create
    create_luks_pv_and_vg
  elif [[ ${DO_CRYPT_HDD} == "nocrypt" ]] && [[ ${HDD_LABEL} == "bios" ]]
  then
    bios_create_pv_and_vg
  else
    echo "something is broken here"
    exit 1
  fi
}


set_fs_boot(){
  case ${FS_BOOT} in
  
    ext4)
      export MKFS_BOOT="mkfs.ext4 -m 0 -FL"
    ;;
  
    xfs)
      export MKFS_BOOT="mkfs.xfs -fL"
    ;;      
    
    btrfs)
      export MKFS_BOOT="mkfs.btrfs -fL"
    ;;  
    
    f2fs)
      export MKFS_BOOT="mkfs.f2fs -fl"
    ;;  
    
    *)
      echo "supported filesystems are:
      - ext4
      - btrfs
      - xfs
      - f2fs"
      exit 1
    ;;
    
  esac  
}


set_fs_root_os(){
  case ${FS_ROOT_OS} in
  
    ext4)
      export MKFS_OS="mkfs.ext4 -m 0 -FL"
    ;;
  
    xfs)
      export MKFS_OS="mkfs.xfs -fL"
    ;;      
    
    btrfs)
      export MKFS_OS="mkfs.btrfs -fL"
    ;;  
    
    f2fs)
      export MKFS_OS="mkfs.f2fs -fl"
    ;;  
    
    *)
      echo "supported filesystems are:
      - ext4
      - btrfs
      - xfs
      - f2fs"
      exit 1
    ;;  
    
  esac  
}


efi_format_lvs(){
  mkfs.vfat -n esp ${HDD}1
  ${MKFS_BOOT} boot ${HDD}2
  ${MKFS_OS} root /dev/${VG_NAME}/root
  ${MKFS_OS} var /dev/${VG_NAME}/var
  ${MKFS_OS} home /dev/${VG_NAME}/home
  mkswap -L swappy /dev/${VG_NAME}/swappy
}


bios_format_lvs(){
  ${MKFS_BOOT} boot ${HDD}1
  ${MKFS_OS} root /dev/${VG_NAME}/root
  ${MKFS_OS} var /dev/${VG_NAME}/var
  ${MKFS_OS} home /dev/${VG_NAME}/home
  mkswap -L swappy /dev/${VG_NAME}/swappy
}


efi_mount_parts(){
  mount /dev/${VG_NAME}/root /mnt
  mkdir -p /mnt/{var,home,boot,esp}
  mount /dev/${VG_NAME}/var /mnt/var
  mount /dev/${VG_NAME}/home /mnt/home
  mount ${HDD}1 /mnt/esp
  mount ${HDD}2 /mnt/boot
}


bios_mount_parts(){
  mount /dev/${VG_NAME}/root /mnt
  mkdir -p /mnt/{var,home,boot}
  mount /dev/${VG_NAME}/var /mnt/var
  mount /dev/${VG_NAME}/home /mnt/home
  mount ${HDD}1 /mnt/boot
}


create_and_mount_lv(){
  if [[ ${HDD_LABEL} == "efi" ]] 
  then
    efi_format_lvs
    efi_mount_parts
  elif [[ ${HDD_LABEL} == "bios" ]]
  then
    bios_format_lvs
    bios_mount_parts
  else
    echo "something is broken at formatting and mounting partitions"
    exit 1
  fi
}
